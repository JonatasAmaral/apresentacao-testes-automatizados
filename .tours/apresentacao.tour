{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2 - Tour",
  "steps": [
    {
      "title": "Capa",
      "description": "# Anatomia de testes\r\n\r\nVamos dar uma olhada em como fazemos para escrever um teste."
    },
    {
      "file": "src/calc.test.js",
      "description": "O bloco `describe` é um agrupador de teste que sejam relacionados",
      "pattern": "^[^\\S\\n]*describe\\('basic math works', \\(\\) => \\{"
    },
    {
      "file": "src/calc.test.js",
      "selection": {
        "start": {
          "line": 3,
          "character": 1
        },
        "end": {
          "line": 3,
          "character": 37
        }
      },
      "description": "Recebe dois argumentos:\r\n\r\n* uma string para descrever do que o conjunto de teste se trata\r\n* uma função onde os teste serão executados"
    },
    {
      "file": "src/calc.test.js",
      "selection": {
        "start": {
          "line": 4,
          "character": 2
        },
        "end": {
          "line": 4,
          "character": 7
        }
      },
      "description": "a função `test` cria uma unidade de teste"
    },
    {
      "file": "src/calc.test.js",
      "selection": {
        "start": {
          "line": 4,
          "character": 2
        },
        "end": {
          "line": 4,
          "character": 32
        }
      },
      "description": "tambem recebe uma strint que descreve o teste, e um função que o executa"
    },
    {
      "file": "src/calc.test.js",
      "selection": {
        "start": {
          "line": 4,
          "character": 31
        },
        "end": {
          "line": 6,
          "character": 3
        }
      },
      "description": "Dentro do teste, podemos usar uma série de funcionalidades que o Jest oferece."
    },
    {
      "file": "src/calc.test.js",
      "selection": {
        "start": {
          "line": 5,
          "character": 3
        },
        "end": {
          "line": 5,
          "character": 20
        }
      },
      "description": "a função `expect` permite passar como argumento, o retorno da função a ser testada."
    },
    {
      "file": "src/calc.test.js",
      "selection": {
        "start": {
          "line": 5,
          "character": 20
        },
        "end": {
          "line": 5,
          "character": 29
        }
      },
      "description": "e nela podemos _encadear_ blocos que testam se o valor bate com o que se epera.\r\n\r\nAquile **espero** que o retorno de `add(1, 1)` **seja igual** a `2`."
    },
    {
      "file": "src/calc.test.js",
      "selection": {
        "start": {
          "line": 6,
          "character": 3
        },
        "end": {
          "line": 6,
          "character": 33
        }
      },
      "description": "uma **expectativa** pode encadear várias checagens.\r\n\r\nessa confere se `add(1,1)` **não é** `3` _(só pra garantir :D)_"
    },
    {
      "file": "src/calc.test.js",
      "selection": {
        "start": {
          "line": 16,
          "character": 10
        },
        "end": {
          "line": 16,
          "character": 27
        }
      },
      "description": "a função de execução pode ser tão complexa quando necessário. Mas não deve ser _mais_ do que isso."
    },
    {
      "file": "src/calc.test.js",
      "selection": {
        "start": {
          "line": 15,
          "character": 2
        },
        "end": {
          "line": 15,
          "character": 5
        }
      },
      "description": "a função `it` é apenas um outro nome para `test`, e por tanto, funciona de forma exatamente igual.\r\n\r\nO propósito disto, e permitir escrever casos de teste de forma clara (em inglês).\r\n\r\n* `it` should do this...\r\n* `test` if it is that..."
    },
    {
      "title": "Traduzindo",
      "file": "src/calc.test.js",
      "description": "Um pequeno exercicio de tradução para verificar isso.\r\n\r\n```\r\nconst isso = it;\r\nconst esperoQue = (func) => {\r\n\tconst r = expect(func);\r\n\tr.sejaMaiorQue = r.toBeGreaterThan;\r\n\treturn r;\r\n};\r\n\r\nisso('tem que aumentar o valor inicial', () => {\r\n\tesperoQue(add(1, 1)).sejaMaiorQue(1);\r\n});\r\n```\r\n\r\n[vamos testar](command:codetour.sendTextToTerminal?[\"npm run test\"])",
      "line": 34,
      "selection": {
        "start": {
          "line": 3,
          "character": 1
        },
        "end": {
          "line": 25,
          "character": 4
        }
      }
    }
  ]
}