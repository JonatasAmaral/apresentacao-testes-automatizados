{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "2 - Tour",
  "steps": [
    {
      "title": "Capa",
      "description": "# Tipos de testes\r\n\r\n![piramide de teste](https://arquivo.devmedia.com.br/REVISTAS/java/imagens/146/7/3.png)"
    },
    {
      "title": "Teste Unitario",
      "description": "# Teste Unitario\r\n\r\nTesta pequenas unidades, funções \"puras\", que não têm (nem causam) efeitos colaterais.\r\n\r\n### Funções \"puras\"\r\n- Não depende de informação definida externamente[*](#efeitos-colaterais)\r\n- Retorna sempre o mesmo resultado para uma mesma entrada.\r\n\r\n`f(x): x²`\r\n\r\n|`x`|`f(x)`|\r\n|---|---|\r\n|1|1|\r\n|2|4|\r\n|3|9|\r\n|_2_|_4_|\r\n\r\n### Efeitos colaterais\r\n\r\nQuaisquer eventos externos à função, que possam causar falha nos testes, sem que seja um problema da função em si.\r\nExemplo:\r\n\r\n- Acessar uma API que não retorne os dados.\r\n- Banco de dados estar fora do ar."
    },
    {
      "title": "Integracao",
      "file": "src/calc.test.js",
      "line": 1,
      "description": "# Teste de integração\r\n\r\nTesta como uma unidade se comunica com outras."
    },
    {
      "file": "src/calc.test.js",
      "description": "**integrar** as funções de soma e subtração:",
      "pattern": "^[^\\S\\n]*describe\\('integrate add and sub functions', \\(\\) => \\{",
      "title": "compor funções"
    },
    {
      "file": "src/calc.test.js",
      "description": "soma e depois subtratir os mesmos numeros deve dar 0\r\n\r\nex: `2 + 7 - 2 - 7 = 0`",
      "pattern": "^[^\\S\\n]*expect\\(sub\\(add\\(\\.\\.\\.nums\\), \\.\\.\\.nums\\)\\)\\.toBe\\(0\\);",
      "title": "add e sub"
    },
    {
      "file": "src/calc.test.js",
      "description": "adicionar mais que subtrair tem que resultar em numero positivo",
      "line": 10,
      "selection": {
        "start": {
          "line": 10,
          "character": 3
        },
        "end": {
          "line": 13,
          "character": 25
        }
      },
      "title": "add() -> positivo"
    },
    {
      "file": "src/calc.js",
      "description": "Um exemplo de função que chama uma API.",
      "pattern": "^[^\\S\\n]*return \\(await axios\\.get\\(`https://api\\.mathjs\\.org/v4/`, \\{",
      "selection": {
        "start": {
          "line": 13,
          "character": 2
        },
        "end": {
          "line": 13,
          "character": 57
        }
      },
      "title": "chama API"
    },
    {
      "file": "src/calc.test.js",
      "description": "Podemos testar uma funções que tenham efeitos colaterais tambem.\r\n\r\nPorem, sendo uma função asyncrona, desse jeito [vai falhar](command:codetour.sendTextToTerminal?[\"npm run test\"])",
      "line": 20,
      "title": "teste falha"
    },
    {
      "file": "src/calc.test.js",
      "description": "Para que funcione, tornamos o callback asincrono:\r\n\r\n```js\r\nasync () => {\r\n\t\tconst res = await webMultiply(4, 3);\r\n\t\texpect(res).toBe(4 * 3);\r\n\t}\r\n```\r\n\r\n[podemos verificar](command:codetour.sendTextToTerminal?[\"npm run test\"])",
      "pattern": "^[^\\S\\n]*expect\\(webMultiply\\(4, 3\\)\\)\\.toBe\\(4 \\* 3\\);",
      "selection": {
        "start": {
          "line": 18,
          "character": 38
        },
        "end": {
          "line": 20,
          "character": 3
        }
      },
      "line": 23,
      "title": "teste async"
    }
  ]
}